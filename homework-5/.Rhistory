knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidymodels)
library(ISLR) # For the Smarket data set
library(ISLR2) # For the Bikeshare data set
library(discrim)
library(poissonreg)
library(corrr)
library(glmnet)
library(klaR) # for naive bayes
tidymodels_prefer()
setwd("~/Desktop/PSTAT 131/homework-5")
set.seed(3435)
library(janitor)
pokemon <- read.csv("data/Pokemon.csv")
pokemon <- clean_names(pokemon)
pokemon <- tibble(pokemon)
pokemon
library(ggplot2)
g <- ggplot(pokemon, aes(type_1))
g + geom_bar()
pokemon <- pokemon[pokemon$type_1 %in% c("Bug","Fire", "Grass", "Normal", "Water", "Psychic"), ]
pokemon$type_1 <- as.factor(pokemon$type_1)
pokemon$legendary <- as.factor(pokemon$legendary)
pokemon_split <- initial_split(pokemon, prop = 0.7,strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
dim(pokemon_train)
pokemon_folds <- vfold_cv(pokemon_train, v = 5,strata = type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk + attack + speed + defense+ hp+sp_def,pokemon_train) %>%
step_dummy(legendary, generation) %>%
step_scale(all_predictors()) %>%
step_center(all_predictors())
spec <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet") %>%
set_mode("classification")
grid <- grid_regular(penalty(c(-5,5)),mixture(c(0,1)),levels = 10)
wf <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(spec)
tune_res <- tune_grid(
wf,
resamples = pokemon_folds,
grid = grid
)
tune_res <- tune_grid(
wf,
resamples = pokemon_folds,
grid = grid
)
autoplot()
autoplot(tune_res)
